
import { createRequire } from 'module';
const require = createRequire(import.meta.url);

import {
  require_prompts
} from "./chunk-LRSU7IN6.js";
import {
  require_main
} from "./chunk-XDVWGVQZ.js";
import {
  logger
} from "./chunk-H473MSWF.js";
import {
  __toESM
} from "./chunk-567UPUC7.js";

// src/displayBanner.ts
import fs from "node:fs";
import path from "node:path";
function displayBanner(version = null, hideBanner = false) {
  const b = "\x1B[38;5;27m";
  const lightblue = "\x1B[38;5;51m";
  const w = "\x1B[38;5;255m";
  const r = "\x1B[0m";
  const red = "\x1B[38;5;196m";
  let versionColor = lightblue;
  const __dirname = path.resolve(import.meta.dirname, "..");
  if (!version) {
    const packageJsonPath = path.join(__dirname, "package.json");
    if (!fs.existsSync(packageJsonPath)) {
    } else {
      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, "utf-8"));
      version = packageJson.version;
    }
  }
  if (version.includes("beta") || version.includes("alpha")) {
    versionColor = red;
  }
  const banners = [
    //     // Banner 2
    //     `
    // ${b}          ###                                  ${w}  # ###       #######  ${r}
    // ${b}         ###    #                            / ${w} /###     /       ###  ${r}
    // ${b}          ##   ###                          /  ${w}/  ###   /         ##  ${r}
    // ${b}          ##    #                          / ${w} ##   ###  ##        #   ${r}
    // ${b}          ##                              /  ${w}###    ###  ###          ${r}
    // ${b}   /##    ##  ###    ######      /###    ${w}##   ##     ## ## ###        ${r}
    // ${b}  / ###   ##   ###  /#######    / ###  / ${w}##   ##     ##  ### ###      ${r}
    // ${b} /   ###  ##    ## /      ##   /   ###/  ${w}##   ##     ##    ### ###    ${r}
    // ${b}##    ### ##    ##        /   ##    ##   ${w}##   ##     ##      ### /##  ${r}
    // ${b}########  ##    ##       /    ##    ##   ${w}##   ##     ##        #/ /## ${r}
    // ${b}#######   ##    ##      ###   ##    ##   ${w} ##  ##     ##         #/ ## ${r}
    // ${b}##        ##    ##       ###  ##    ##   ${w}  ## #      /           # /  ${r}
    // ${b}####    / ##    ##        ### ##    /#   ${w}   ###     /  /##        /   ${r}
    // ${b} ######/  ### / ### /      ##  ####/ ##  ${w}    ######/  /  ########/    ${r}
    // ${b}  #####    ##/   ##/       ##   ###   ## ${w}      ###   /     #####      ${r}
    // ${b}                           /             ${w}            |                ${r}
    // ${b}                          /              ${w}             \)              ${r}
    // ${b}                         /               ${w}                             ${r}
    // ${b}                        /                ${w}                             ${r}
    // `,
    //     // Banner 3
    //     `
    // ${b}      :::::::::::::      ::::::::::::::::::::    ::: ${w}    ::::::::  :::::::: ${r}
    // ${b}     :+:       :+:          :+:         :+:   :+: :+:${w}  :+:    :+::+:    :+: ${r}
    // ${b}    +:+       +:+          +:+        +:+   +:+   +:+${w} +:+    +:++:+         ${r}
    // ${b}   +#++:++#  +#+          +#+       +#+   +#++:++#++:${w}+#+    +:++#++:++#++   ${r}
    // ${b}  +#+       +#+          +#+      +#+    +#+     +#+${w}+#+    +#+       +#+    ${r}
    // ${b} #+#       #+#          #+#     #+#     #+#     #+##${w}+#    #+##+#    #+#     ${r}
    // ${b}##########################################     #### ${w}#######  ########       ${r}`,
    `
${b}\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28F8\u28FF\u2800\u2819\u281B\u283F\u28A4\u28E6\u28D0\u2800${w}\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800${r}
${b}\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28D0\u28FF\u28FF\u28B0\u2840\u2800\u2800\u2800\u2808\u283B\u2800${w}\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800${r}
${b}\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28F4\u2824\u283E\u281B\u281B\u28FF\u28F6\u28C7\u2800\u2800\u2846\u2800\u2800\u2800${w}\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800${r}
${b}\u2800\u2800\u28B0\u28CB\u2873\u2844\u2800\u2800\u2800\u28A8\u28ED\u2840\u2800\u2864\u2800\u28C0\u28DD\u28BF\u28F6\u28FF\u2845\u2800\u2800\u2800${w}\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800${r}
${b}\u2800\u2800\u28B8\u28EF\u2800\u28C7\u2800\u2800\u2800\u28FC\u28FF\u28FF\u28C6\u28B7\u28F4\u28FF\u28FF\u284F\u28DB\u2849\u2800\u2800\u2800\u2800${w}\u28B8\u28FF\u28FF\u28FF\u28FF\u28FF\u28FF\u28B8\u28FF\u28FF\u2800\u2800\u2800\u2800\u2800\u28FF\u28FF\u2847\u28FF\u28FF\u28FF\u28FF\u28FF\u28FF\u28FF\u2847\u2800\u2800\u2800\u28FE\u28FF\u28FF\u28E7\u2800\u2800\u2800\u28B8\u281F\u2880\u28F4\u28FF\u28FF\u28FF\u28FF\u28E6\u2840\u28E0\u28FE\u28FF\u28FF\u28FF\u28FF\u28E6\u2859\u28BF\u2800${r}
${b}\u2800\u2800\u2800\u2819\u28B7\u28EE\u2800\u2800\u28B8\u28FF\u28FF\u28FF\u28FF\u28F7\u28EF\u28DF\u28CF\u28FC\u28F7\u28C5\u283E\u285F\u2800\u2800${w}\u28B8\u28FF\u28C7\u28C0\u28C0\u28C0\u2800\u28B8\u28FF\u28FF\u2800\u2800\u2800\u2800\u2800\u28FF\u28FF\u2847\u2800\u2800\u2800\u28E0\u28FF\u28FF\u281F\u2801\u2800\u2800\u28FC\u28FF\u285F\u28FF\u28FF\u28C6\u2800\u2800\u2800\u2800\u28FF\u28FF\u280B\u2800\u2808\u283B\u28FF\u2847\u28FF\u28FF\u28C5\u28C0\u28C0\u285B\u281B\u2803\u2800\u2800${r}
${b}\u2800\u2800\u2800\u2800\u2800\u2801\u2800\u2800\u28B8\u28FF\u28FF\u28FF\u28FF\u28FF\u28FF\u28FF\u28FF\u28FF\u28FF\u280B\u2800\u2800\u2800\u2800${w}\u28B8\u28FF\u287F\u283F\u283F\u283F\u2800\u28B8\u28FF\u28FF\u2800\u2800\u2800\u2800\u2800\u28FF\u28FF\u2847\u2800\u28E0\u28FE\u28FF\u281F\u2801\u2800\u2800\u2800\u28F0\u28FF\u28FF\u28C1\u28F8\u28FF\u28FF\u2844\u2800\u2800\u2800\u28FF\u28FF\u2840\u2800\u2800\u2898\u28FF\u28FF\u2888\u28DB\u283F\u283F\u283F\u28FF\u28F7\u2844\u2800\u2800${r}
${b}\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2838\u28FF\u28FF\u28FF\u28FF\u28FF\u28FF\u28FF\u28FF\u28C9\u285F\u2800\u2800\u2800\u2800\u2800${w}\u28B8\u28FF\u28E7\u28E4\u28E4\u28E4\u28E4\u28B8\u28FF\u28FF\u28E6\u28E4\u28E4\u28E4\u2844\u28FF\u28FF\u2847\u28FE\u28FF\u28FF\u28E7\u28E4\u28E4\u28E4\u2844\u28B0\u28FF\u28FF\u281F\u281B\u281B\u283B\u28FF\u28FF\u2844\u28A0\u2840\u283B\u28FF\u28FF\u28E6\u28F4\u28FF\u28FF\u2807\u28BF\u28FF\u28E6\u28E4\u28E4\u28FF\u28FF\u2807\u28E0\u2800${r}
${b}\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28B0\u2848\u281B\u283F\u28FF\u28FF\u28FF\u28FF\u28FF\u280B\u2800\u28E6\u28E4\u28C4\u2800\u2800${w}\u2818\u281B\u281B\u281B\u281B\u281B\u281B\u2808\u281B\u281B\u281B\u281B\u281B\u281B\u2803\u281B\u281B\u2803\u281B\u281B\u281B\u281B\u281B\u281B\u281B\u2803\u281B\u281B\u2803\u2800\u2800\u2800\u2800\u2819\u281B\u2803\u2818\u281B\u2800\u2808\u281B\u281B\u281B\u281B\u2801\u2800\u2800\u2819\u281B\u281B\u281B\u281B\u2801\u281A\u281B\u2800${r}
${b}\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28B8\u28FF\u2866\u2800\u2800\u2809\u281B\u283F\u2803\u2800\u2800\u2800\u2801\u2809\u2800\u2800${w}\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800${r}
${b}\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28B8\u28FF\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28BE\u2843\u2800\u2800${w}\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800${r}
`
  ];
  const randomBanner = banners[Math.floor(Math.random() * banners.length)];
  if (!hideBanner) {
    console.log(randomBanner);
  } else {
    console.log(`*** elizaOS ***`);
  }
  console.log(`${versionColor}Version: ${version}${r}`);
}

// src/utils/get-config.ts
var import_dotenv = __toESM(require_main(), 1);
var import_prompts = __toESM(require_prompts(), 1);
import { promises as fs2, existsSync } from "node:fs";
import os from "node:os";
import path2 from "node:path";
import { z } from "zod";
var postgresConfigSchema = z.object({
  type: z.literal("postgres"),
  config: z.object({
    url: z.string().optional()
  })
});
var pgliteConfigSchema = z.object({
  type: z.literal("pglite"),
  config: z.object({
    dataDir: z.string()
  })
});
function isValidPostgresUrl(url) {
  if (!url) return false;
  const basicPattern = /^postgresql:\/\/[^:]+:[^@]+@[^:]+:\d+\/\w+$/;
  const permissivePattern = /^postgresql:\/\/.*@.*:\d+\/.*$/;
  const cloudPattern = /^postgresql:\/\/[^:]+:[^@]+@[^\/]+\/[^?]+(\?.*)?$/;
  return basicPattern.test(url) || cloudPattern.test(url) || permissivePattern.test(url);
}
function getElizaDirectories() {
  const homeDir = os.homedir();
  const elizaDir = path2.join(homeDir, ".eliza");
  const elizaDbDir = path2.join(elizaDir, "db");
  const envFilePath = path2.join(elizaDir, ".env");
  return {
    homeDir,
    elizaDir,
    elizaDbDir,
    envFilePath
  };
}
async function ensureElizaDir() {
  const dirs = getElizaDirectories();
  if (!existsSync(dirs.elizaDir)) {
    await fs2.mkdir(dirs.elizaDir, { recursive: true });
    logger.info(`Created directory: ${dirs.elizaDir}`);
  }
  return dirs;
}
async function ensureEnvFile(envFilePath) {
  if (!existsSync(envFilePath)) {
    await fs2.writeFile(envFilePath, "", { encoding: "utf8" });
    logger.debug(`Created empty .env file at ${envFilePath}`);
  }
}
async function setupPgLite(elizaDbDir, envFilePath) {
  try {
    if (!existsSync(elizaDbDir)) {
      await fs2.mkdir(elizaDbDir, { recursive: true });
      logger.info(`Created PGLite database directory: ${elizaDbDir}`);
    }
    await ensureEnvFile(envFilePath);
    await fs2.writeFile(envFilePath, `PGLITE_DATA_DIR=${elizaDbDir}
`, { flag: "a" });
    process.env.PGLITE_DATA_DIR = elizaDbDir;
    logger.success("PGLite configuration saved");
  } catch (error) {
    logger.error("Error setting up PGLite directory:", error);
    throw error;
  }
}
async function storePostgresUrl(url, envFilePath) {
  if (!url) return;
  try {
    await ensureEnvFile(envFilePath);
    await fs2.writeFile(envFilePath, `POSTGRES_URL=${url}
`, { flag: "a" });
    process.env.POSTGRES_URL = url;
    logger.success("Postgres URL saved to configuration");
  } catch (error) {
    logger.warn("Error saving database configuration:", error);
  }
}
async function promptAndStorePostgresUrl(envFilePath) {
  const response = await (0, import_prompts.default)({
    type: "text",
    name: "postgresUrl",
    message: "Enter your Postgres URL:",
    validate: (value) => {
      if (value.trim() === "") return "Postgres URL cannot be empty";
      const isValid = isValidPostgresUrl(value);
      if (!isValid) {
        return `Invalid URL format. Expected: postgresql://user:password@host:port/dbname.`;
      }
      return true;
    }
  });
  if (!response.postgresUrl) {
    return null;
  }
  await storePostgresUrl(response.postgresUrl, envFilePath);
  return response.postgresUrl;
}
async function configureDatabaseSettings(reconfigure = false) {
  const { elizaDbDir, envFilePath } = await ensureElizaDir();
  await ensureEnvFile(envFilePath);
  let postgresUrl = process.env.POSTGRES_URL;
  const pgliteDataDir = process.env.PGLITE_DATA_DIR;
  if (postgresUrl && !reconfigure) {
    logger.debug("Using existing PostgreSQL configuration");
    return postgresUrl;
  }
  if (pgliteDataDir && !reconfigure) {
    logger.debug(`Using existing PGLite configuration: ${pgliteDataDir}`);
    if (!existsSync(pgliteDataDir)) {
      await fs2.mkdir(pgliteDataDir, { recursive: true });
      logger.info(`Created PGLite database directory: ${pgliteDataDir}`);
    }
    return null;
  }
  try {
    const { database } = await (0, import_prompts.default)({
      type: "select",
      name: "database",
      message: "Select your database:",
      choices: [
        { title: "pglite (embedded database)", value: "pglite" },
        { title: "postgres (external database)", value: "postgres" }
      ],
      initial: 0
    });
    if (!database || database === "pglite") {
      const dbChoice = !database ? "Selection canceled, defaulting to" : "Selected";
      logger.info(`${dbChoice} pglite database`);
      await setupPgLite(elizaDbDir, envFilePath);
      return null;
    }
    const result = await promptAndStorePostgresUrl(envFilePath);
    if (!result) {
      logger.warn("No valid Postgres URL provided, defaulting to pglite database");
      await setupPgLite(elizaDbDir, envFilePath);
      return null;
    }
    return result;
  } catch (error) {
    logger.error("Error during database configuration:", error);
    logger.info("Defaulting to pglite database");
    try {
      await setupPgLite(elizaDbDir, envFilePath);
    } catch (setupError) {
      logger.error("Critical error setting up database:", setupError);
      throw new Error("Failed to configure database");
    }
  }
  return null;
}
var rawConfigSchema = z.object({
  $schema: z.string().optional(),
  database: z.discriminatedUnion("type", [postgresConfigSchema, pgliteConfigSchema]),
  plugins: z.object({
    registry: z.string().url(),
    installed: z.array(z.string())
  }),
  paths: z.object({
    knowledge: z.string()
  })
}).strict();
var configSchema = rawConfigSchema.extend({
  resolvedPaths: z.object({
    knowledge: z.string()
  })
});
async function loadEnvironment(projectDir = process.cwd()) {
  const projectEnvPath = path2.join(projectDir, ".env");
  const globalEnvDir = path2.join(os.homedir(), ".eliza");
  const globalEnvPath = path2.join(globalEnvDir, ".env");
  if (existsSync(projectEnvPath)) {
    import_dotenv.default.config({ path: projectEnvPath });
    return;
  }
  if (existsSync(globalEnvPath)) {
    import_dotenv.default.config({ path: globalEnvPath });
    return;
  }
  if (!existsSync(globalEnvDir)) {
    await fs2.mkdir(globalEnvDir, { recursive: true });
  }
  if (!existsSync(globalEnvPath)) {
    await fs2.writeFile(globalEnvPath, "# Global environment variables for Eliza\n");
  }
}

export {
  displayBanner,
  getElizaDirectories,
  setupPgLite,
  promptAndStorePostgresUrl,
  configureDatabaseSettings,
  loadEnvironment
};
