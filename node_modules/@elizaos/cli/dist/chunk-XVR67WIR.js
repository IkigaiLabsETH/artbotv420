
import { createRequire } from 'module';
const require = createRequire(import.meta.url);

import {
  installPlugin
} from "./chunk-EBPMC34H.js";
import {
  getLocalRegistryIndex,
  getPluginRepository,
  getRegistryIndex
} from "./chunk-VI5W7VMD.js";
import {
  execa
} from "./chunk-LIA2BGYJ.js";
import {
  handleError
} from "./chunk-CGF4ITLZ.js";
import {
  Command
} from "./chunk-5LH7NKB4.js";
import {
  logger
} from "./chunk-H473MSWF.js";

// src/commands/project.ts
var project = new Command().name("project").description("Manage an ElizaOS project");
project.command("list-plugins").description("list available plugins to install into the project").option("-t, --type <type>", "filter by type (adapter, client, plugin)").action(async (opts) => {
  try {
    let registry;
    try {
      registry = await getLocalRegistryIndex();
    } catch (error) {
      logger.debug("Failed to fetch registry without credentials, trying authenticated method");
      registry = await getRegistryIndex();
    }
    const plugins = Object.keys(registry).filter((name) => !opts.type || name.includes(opts.type)).sort();
    logger.info("\nAvailable plugins:");
    for (const plugin of plugins) {
      logger.info(`  ${plugin}`);
    }
    logger.info("");
  } catch (error) {
    handleError(error);
  }
});
project.command("add-plugin").description("add a plugin to the project").argument("<plugin>", "plugin name").option("--no-env-prompt", "Skip prompting for environment variables").action(async (plugin, opts) => {
  try {
    const cwd = process.cwd();
    const repo = await getPluginRepository(plugin);
    if (!repo) {
      logger.error(`Plugin ${plugin} not found in registry`);
      process.exit(1);
    }
    logger.info(`Installing ${plugin}...`);
    await installPlugin(repo, cwd);
    logger.success(`Successfully installed ${plugin}`);
  } catch (error) {
    handleError(error);
  }
});
project.command("remove-plugin").description("remove a plugin from the project").argument("<plugin>", "plugin name").action(async (plugin, _opts) => {
  try {
    const cwd = process.cwd();
    logger.info(`Removing ${plugin}...`);
    await execa("bun", ["remove", plugin], {
      cwd,
      stdio: "inherit"
    });
    logger.success(`Successfully removed ${plugin}`);
  } catch (error) {
    handleError(error);
  }
});

export {
  project
};
