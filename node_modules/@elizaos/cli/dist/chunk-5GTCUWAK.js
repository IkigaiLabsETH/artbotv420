
import { createRequire } from 'module';
const require = createRequire(import.meta.url);

import {
  execa
} from "./chunk-LIA2BGYJ.js";
import {
  logger
} from "./chunk-H473MSWF.js";

// src/utils/build-project.ts
import * as fs from "node:fs";
import * as path from "node:path";
function isMonorepo(projectPath) {
  try {
    const packageJsonPath = path.join(projectPath, "package.json");
    if (fs.existsSync(packageJsonPath)) {
      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, "utf8"));
      return !!packageJson.workspaces;
    }
  } catch (err) {
    logger.debug(`Error checking for monorepo: ${err}`);
  }
  return false;
}
async function buildProject(cwd, isPlugin = false) {
  logger.info(`Building ${isPlugin ? "plugin" : "project"}...`);
  const inMonorepo = isMonorepo(path.resolve(cwd, "../.."));
  if (inMonorepo) {
    logger.info("Detected monorepo structure, skipping install");
  }
  try {
    const packageJsonPath = path.join(cwd, "package.json");
    if (fs.existsSync(packageJsonPath)) {
      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, "utf8"));
      if (packageJson.scripts?.build) {
        logger.info("Using build script from package.json");
        try {
          logger.debug("Attempting to build with bun...");
          await execa("bun", ["run", "build"], { cwd, stdio: "inherit" });
          logger.info("Build completed successfully with bun");
          return;
        } catch (bunError) {
          logger.debug(`Bun build failed, falling back to npm: ${bunError}`);
          try {
            logger.debug("Attempting to build with npm...");
            await execa("npm", ["run", "build"], { cwd, stdio: "inherit" });
            logger.info("Build completed successfully with npm");
            return;
          } catch (npmError) {
            logger.debug(`npm build failed: ${npmError}`);
            throw new Error(`Failed to build using npm: ${npmError}`);
          }
        }
      }
    }
    logger.warn("No build script found in package.json, trying default build commands");
    const tsconfigPath = path.join(cwd, "tsconfig.json");
    if (fs.existsSync(tsconfigPath)) {
      try {
        logger.debug("Found tsconfig.json, attempting to build with tsc...");
        await execa("npx", ["tsc", "--build"], { cwd, stdio: "inherit" });
        logger.info("Build completed successfully with tsc");
        return;
      } catch (tscError) {
        logger.debug(`tsc build failed: ${tscError}`);
      }
    }
    throw new Error("Could not determine how to build the project");
  } catch (error) {
    logger.error(`Failed to build ${isPlugin ? "plugin" : "project"}: ${error}`);
    throw error;
  }
}

export {
  buildProject
};
